--1. List all customers with their full name and city
select 
first_name||' '||second_name AS full_name,
city
from customer;

-- 2. Show all books priced above 2000
SELECT * 
FROM luxsql.books
WHERE price > 2000;

--3. List customers who live in 'Nairobi'
SELECT * 
FROM customer
WHERE city = 'Nairobi';

--4. Retrieve all book titles that were published in 2023
SELECT title 
FROM luxsql.books
WHERE EXTRACT(YEAR FROM published_date) = 2023;

--5. Show all orders placed after March 1st, 2025
SELECT * 
FROM luxsql.orders
WHERE order_date > '2025-03-01';

-- 6. List all books ordered, sorted by price (descending)
SELECT DISTINCT b.book_id, b.title, b.price
FROM luxsql.orders o
JOIN luxsql.books b ON o.book_id = b.book_id
ORDER BY b.price DESC;

--7. Show all customers whose names start with 'J'
SELECT * 
FROM luxsql.customer
WHERE first_name ilike  'J%';

--8.List books with prices between 1500 and 3000
SELECT * 
FROM luxsql.books
WHERE price BETWEEN 1500 AND 3000;

-- 9. Count the number of customers in each city
SELECT city, COUNT(*) AS customer_count
from customer
GROUP BY city;

-- 10.Show the total number of orders per customer
SELECT 
  c.first_name || ' ' || c.second_name AS customer_name,
  COUNT(o.order_id) AS total_orders
FROM luxsql.customer c
LEFT JOIN luxsql.orders o ON c.customer_id = o.customer_id
GROUP BY c.customer_id, c.first_name, c.second_name;

--11. Find the average price of books in the store
SELECT AVG(price) AS average_book_price
FROM luxsql.books;

--12. List the book title and total quantity ordered for each book
SELECT 
  b.title,
  COUNT(o.order_id) AS total_times_ordered
FROM luxsql.books b
JOIN luxsql.orders o ON b.book_id = o.book_id
GROUP BY b.book_id, b.title;

--13. Show customers who have placed more orders than customer with ID = 1
SELECT 
  c.customer_id,
  c.first_name || ' ' || c.second_name AS customer_name,
  COUNT(o.order_id) AS order_count
FROM luxsql.customer c
JOIN luxsql.orders o ON c.customer_id = o.customer_id
GROUP BY c.customer_id, c.first_name, c.second_name
HAVING COUNT(o.order_id) > (
  SELECT COUNT(*) 
  FROM luxsql.orders 
  WHERE customer_id = 1
);
--14. List books that are more expensive than the average book price
SELECT *
FROM luxsql.books
WHERE price > (
  SELECT AVG(price)
  FROM luxsql.books
);

--15. Show each customer and the number of orders they placed
SELECT 
  c.first_name || ' ' || c.second_name AS customer_name,
  (
    SELECT COUNT(*) 
    FROM luxsql.orders o 
    WHERE o.customer_id = c.customer_id
  ) AS order_count
FROM luxsql.customer c;

--Show full name of each customer and the titles of books they ordered
SELECT 
  c.first_name || ' ' || c.second_name AS customer_name,
  b.title AS book_title
FROM luxsql.orders o
JOIN luxsql.customer c ON o.customer_id = c.customer_id
JOIN luxsql.books b ON o.book_id = b.book_id;

--List all orders including book title, quantity, and total cost (price Ã— quantity)

ALTER TABLE luxsql.orders ADD COLUMN quantity INT DEFAULT 1;
SELECT 
  o.order_id,
  b.title AS book_title,
  o.quantity,
  (b.price * o.quantity) AS total_cost
FROM luxsql.orders o
JOIN luxsql.books b ON o.book_id = b.book_id;

--18. Show customers who haven't placed any orders (LEFT JOIN)
SELECT 
  c.first_name || ' ' || c.second_name AS customer_name
FROM luxsql.customer c
LEFT JOIN luxsql.orders o ON c.customer_id = o.customer_id
WHERE o.order_id IS NULL;

--19. List all books and the names of customers who ordered them, if any (LEFT JOIN)
SELECT 
  b.title AS book_title,
  c.first_name || ' ' || c.second_name AS customer_name
FROM luxsql.books b
LEFT JOIN luxsql.orders o ON b.book_id = o.book_id
LEFT JOIN luxsql.customer c ON o.customer_id = c.customer_id;

--20.20. Show customers who live in the same city (SELF JOIN)
SELECT 
  c1.first_name || ' ' || c1.second_name AS customer_1,
  c2.first_name || ' ' || c2.second_name AS customer_2,
  c1.city
FROM customer c1
JOIN customer c2 
  ON c1.city = c2.city AND c1.customer_id <> c2.customer_id
ORDER BY c1.city;

--21. Customers who placed more than 2 orders for books priced over 2000
SELECT 
  c.customer_id,
  c.first_name || ' ' || c.second_name AS customer_name,
  COUNT(o.order_id) AS high_value_orders
FROM luxsql.orders o
JOIN customer c ON o.customer_id = c.customer_id
JOIN luxsql.books b ON o.book_id = b.book_id
WHERE b.price > 2000
GROUP BY c.customer_id, c.first_name, c.second_name
HAVING COUNT(o.order_id) > 2;

--22. Customers who ordered the same book more than once
SELECT 
  c.first_name || ' ' || c.second_name AS customer_name,
  b.title,
  COUNT(*) AS times_ordered
FROM luxsql.orders o
JOIN luxsql.customer c ON o.customer_id = c.customer_id
JOIN luxsql.books b ON o.book_id = b.book_id
GROUP BY c.customer_id, c.first_name, c.second_name, b.title
HAVING COUNT(*) > 1;

--23. Each customer's full name, total quantity of books ordered, and total amount spent
SELECT 
  c.first_name || ' ' || c.second_name AS customer_name,
  SUM(o.quantity) AS total_quantity,
  SUM(o.quantity * b.price) AS total_spent
FROM luxsql.orders o
JOIN luxsql.customer c ON o.customer_id = c.customer_id
JOIN luxsql.books b ON o.book_id = b.book_id
GROUP BY c.customer_id, c.first_name, c.second_name;

--24. Books that have never been ordered
SELECT *
FROM luxsql.books b
LEFT JOIN luxsql.orders o ON b.book_id = o.book_id
WHERE o.order_id IS NULL;

--25. Customer who has spent the most in total
SELECT 
  c.first_name || ' ' || c.second_name AS customer_name,
  SUM(o.quantity * b.price) AS total_spent
FROM luxsql.orders o
JOIN luxsql.customer c ON o.customer_id = c.customer_id
JOIN luxsql.books b ON o.book_id = b.book_id
GROUP BY c.customer_id, c.first_name, c.second_name
ORDER BY total_spent DESC
LIMIT 1;

--26. For each book, number of different customers who have ordered it
SELECT 
  b.title,
  COUNT(DISTINCT o.customer_id) AS customer_count
FROM luxsql.orders o
JOIN luxsql.books b ON o.book_id = b.book_id
GROUP BY b.book_id, b.title;

--27. Books whose total order quantity is above the average
SELECT 
  b.title,
  SUM(o.quantity) AS total_quantity
FROM luxsql.orders o
JOIN luxsql.books b ON o.book_id = b.book_id
GROUP BY b.book_id, b.title
HAVING SUM(o.quantity) > (
  SELECT AVG(total_quantity)
  FROM (
    SELECT SUM(quantity) AS total_quantity
    FROM luxsql.orders
    GROUP BY book_id
  ) AS book_totals
);

-- 28. Top 3 customers with highest number of orders and total spent
SELECT 
  c.first_name || ' ' || c.second_name AS customer_name,
  COUNT(o.order_id) AS total_orders,
  SUM(o.quantity * b.price) AS total_spent
FROM luxsql.orders o
JOIN luxsql.customer c ON o.customer_id = c.customer_id
JOIN luxsql.books b ON o.book_id = b.book_id
GROUP BY c.customer_id, c.first_name, c.second_name
ORDER BY total_orders DESC
LIMIT 3;

